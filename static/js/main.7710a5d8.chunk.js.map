{"version":3,"sources":["liste.js","App.js","serviceWorker.js","index.js"],"names":["Liste","props","changeText","e","setState","newText","target","value","add","newItm","Math","random","state","newList","listTodo","delete","id","list2","filter","el","className","type","placeholder","onChange","onClick","this","map","i","key","text","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAoFeA,E,YAlFX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAUVC,WAAa,SAACC,GACV,EAAKC,SAAS,CAAEC,QAASF,EAAEG,OAAOC,SAZnB,EAcnBC,IAAM,WAEF,IAAIC,EAAS,CAAE,GAAMC,KAAKC,SAAU,KAAQ,EAAKC,MAAMP,SACnDQ,EAAO,sBAAO,EAAKD,MAAME,UAAlB,CAA4BL,IACvC,EAAKL,SAAS,CAAEU,SAAUD,KAlBX,EAsBnBE,OAAS,SAACC,GACN,IAAMC,EAAQ,EAAKL,MAAME,SAASI,QAAO,SAACC,GAEtC,OAAOA,EAAGH,KAAOA,KAIrB,EAAKZ,SAAS,CACVU,SAAUG,KA5Bd,EAAKL,MAAQ,CACTE,SAAU,CACN,CAAE,GAAM,EAAG,KAAQ,SACnB,CAAE,GAAM,EAAG,KAAQ,SACnB,CAAE,GAAM,EAAG,KAAQ,UAEvBT,QAAS,IARE,E,sEAsCT,IAAD,OAEL,OACI,6BACI,yBAAKW,GAAG,QAAQI,UAAU,UACtB,yBAAKA,UAAU,QACX,0CAAmB,6BACnB,6CAEJ,6BACI,2BAAOC,KAAK,OAAOC,YAAY,iBAAiBC,SAAU,SAACpB,GAAD,OAAO,EAAKD,WAAWC,MAAa,6BAAM,6BAAM,6BAC1G,0BAAMiB,UAAU,SAASI,QAASC,KAAKjB,KAAvC,UAGR,yBAAKY,UAAU,YACX,0DACCK,KAAKb,MAAME,SAASY,KAAI,SAACP,EAAIQ,GAC1B,OACI,uBAAGC,IAAKD,GAAG,8BAAOR,EAAGU,MAAY,4BAAQT,UAAU,OAAOI,QAAS,kBAAM,EAAKT,OAAOI,EAAGH,MAAvD,UAAjC,c,GAzDRc,a,MCcLC,MAXf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7710a5d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Liste extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            listTodo: [\r\n                { \"id\": 0, \"text\": \"item1\" },\r\n                { \"id\": 1, \"text\": \"item2\" },\r\n                { \"id\": 2, \"text\": \"item3\" },\r\n            ],\r\n            newText: ''\r\n        }\r\n    }\r\n    changeText = (e) => {\r\n        this.setState({ newText: e.target.value })\r\n    }\r\n    add = () => {\r\n\r\n        let newItm = { \"id\": Math.random(), \"text\": this.state.newText }\r\n        let newList = [...this.state.listTodo, newItm]\r\n        this.setState({ listTodo: newList })\r\n    }\r\n\r\n\r\n    delete = (id) => {\r\n        const list2 = this.state.listTodo.filter((el) => {\r\n\r\n            return el.id !== id\r\n        }\r\n\r\n        )\r\n        this.setState({\r\n            listTodo: list2\r\n\r\n\r\n        })\r\n    }\r\n\r\n\r\n    \r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div id=\"myDIV\" className=\"header\">\r\n                    <div className=\"text\">\r\n                        <h2>To-Do APP!</h2><br />\r\n                        <p>ADD NEW TO-DO</p>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"text\" placeholder=\"Enter New Task\" onChange={(e) => this.changeText(e)} ></input><br /><br /><br />\r\n                        <span className=\"addBtn\" onClick={this.add}>Add </span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"get-work\">\r\n                    <h3> Let's get Some Work done!</h3>\r\n                    {this.state.listTodo.map((el, i) => {\r\n                        return (\r\n                            <p key={i}><span>{el.text}</span><button className=\"btn1\" onClick={() => this.delete(el.id)}>delete</button> </p>\r\n                        )\r\n\r\n\r\n                    }\r\n\r\n\r\n\r\n\r\n\r\n                    )\r\n                    }\r\n\r\n\r\n\r\n                </div >\r\n            </div >\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Liste;\r\n","import React from 'react';\nimport Liste from './liste';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Liste/>\n    </div>\n\n  );\n  \n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}